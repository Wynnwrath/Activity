using System;

namespace DivideAndConquer
{
    class Program
    {
        static void Main(String[] args)
        {
            int[] numbers = { 90, 50, 70, 60, 20 };
            Console.WriteLine("Original Array:");
            printArray(numbers); 

            MergeSort(numbers, 0, numbers.Length - 1);

            Console.WriteLine("\nSorted Array:"); 
            printArray(numbers);
        }

        // Method to perform Merge Sort on the array
        static void MergeSort(int[] array, int left, int right)
        {
            // Base case: if the left index is less than the right index
            if (left < right)
            {
                // Find the middle index
                int mid = left + (right - left) / 2;

                MergeSort(array, left, mid);
                MergeSort(array, mid + 1, right);
                
                Merge(array, left, mid, right);
            }
        }

        // Method to merge two sorted subarrays into a single sorted array
        static void Merge(int[] array, int left, int mid, int right)
        {
            int n1 = mid - left + 1; // Size of the left subarray
            int n2 = right - mid;    // Size of the right subarray

            // Create temporary arrays 
            int[] leftArray = new int[n1];
            int[] rightArray = new int[n2];

            for (int i = 0; i < n1; i++)
            {
                leftArray[i] = array[left + i]; 
            }
            for (int j = 0; j < n2; j++)
            {
                rightArray[j] = array[mid + 1 + j];
            }
            // Merge the temp arrays back into the Original Array
            int iIndex = 0, jIndex = 0, kIndex = left;

            while (iIndex < n1 && jIndex < n2) // Replace the mistake (jIndex == 0)
            {
                if (leftArray[iIndex] <= rightArray[jIndex]) // Compare elements
                {
                    array[kIndex++] = leftArray[iIndex++]; // Place smaller element in the original array
                }
                else
                {
                    array[kIndex++] = rightArray[jIndex++]; // Place smaller element in the original array
                }
            }
            // Added more methods
            // Copy any remaining elements from the right subarray
            // This loop handles the case where there are leftover elements in the right subarray
            // If the right subarray still has elements after the main merging process,
            // they are also already sorted and can be directly copied to the original array.
            // Copy any remaining elements from the left subarray
            while (iIndex < n1)
            {
                array[kIndex++] = leftArray[iIndex++];
            }

            // Copy any remaining elements from the right subarray
            while (jIndex < n2)
            {
                array[kIndex++] = rightArray[jIndex++];
            }
        }

        // Method to print the elements of the array
        static void printArray(int[] array)
        {
            foreach (int i in array)
            {
                Console.Write(i + " "); 
            }
            Console.WriteLine(); 
        }
    }
}
