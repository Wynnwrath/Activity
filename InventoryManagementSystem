import java.util.ArrayList;

public class Product {
    private String productId, productName;
    private int quantity;
    private double price;
    
    public Product (String productId, String productName, int quantity, double price) {
        this.productId = productId;
        this.productName = productName;
        this.quantity = quantity;
        this.price = price;
    }
    
    public Product() {}
    
    public void updateStock(int amount) {
        quantity += amount;
        System.out.println("Product new quantity: " + quantity);
    } 
    
    public void removeStock(int amount) {
        if (amount > quantity) {
            throw new InsufficientStockException("Current stock: " + quantity + ". Cannot remove more than available stock.");
        }
        quantity -= amount;
    }

    public void exceedingStock(int amount) {
        if (amount > 100) {
            throw new InsufficientStockException("Current quantity: " + quantity + ". Quantity must not exceed 100.");
        }
    }

    public void insufficientStock(int remainingStock) {
        if (remainingStock < 0) {
            throw new InsufficientStockException("Current stock: " + quantity + ". Cannot remove more than available stock.");
        }
    }
    
    public void setProductName(String productName) {
        this.productName = productName;
    }
    
    public void setQuantity(int quantity) {
        this.quantity = quantity;
    }
    
    public void setPrice(double price) {
        this.price = price;
    }
        
    public void setProductId(String productId) {
        this.productId = productId;
    }
    
    public String getProductId() {
        return productId;
    }
    
    public String getProductName() {
        return productName;
    }
    
    public int getQuantity() {
        return quantity;
    }
    
    public double getPrice() {
        return price;
    }
    
    public static void main(String[] args) {
        Inventory inv = new Inventory();
        PerishableProduct prod = new PerishableProduct("P001", "Apple", 50, 0.5, "2024-12-31");
        NonPerishableProduct prod2 = new NonPerishableProduct("P002", "Rice", 200, 1.0, 100);
        inv.addProduct(prod);
        inv.addProduct(prod2);

        try {
            prod.updateStock(30);
            inv.removeProduct("P001");
            inv.displayInventory(); // Call this after removing a product
            prod.removeStock(160); // This will throw an exception
            prod.updateStock(-10); // This will also throw an exception
        } catch (InsufficientStockException e) {
            System.out.println(e.getMessage());
        } catch (InvalidQuantityException e) {
            System.out.println(e.getMessage());
        }
        
        inv.displayInventory(); // Call to display inventory after all operations
    }
}

class PerishableProduct extends Product {
    private String expirationDate;
    
    public PerishableProduct(String productId, String productName, int quantity, double price, String expirationDate) {
        super(productId, productName, quantity, price);
        this.expirationDate = expirationDate;
    }
    
    public void updateStock(int amount) {
        int newTotal = super.getQuantity() + amount;
        exceedingStock(newTotal);
        super.updateStock(amount);
    } 
    
    public void removeStock(int amount) {
        int tempTotal = super.getQuantity() - amount;
        insufficientStock(tempTotal);
        super.removeStock(amount);
    }
}

class NonPerishableProduct extends Product {
    private int shelfLife;
    
    public NonPerishableProduct(String productId, String productName, int quantity, double price, int shelfLife) {
        super(productId, productName, quantity, price);
        this.shelfLife = shelfLife;
    }
    
    public void updateStock(int amount) {
        super.updateStock(amount);
    } 
    
    public void removeStock(int amount) {
        super.removeStock(amount);
    }
}

class Inventory {
    private ArrayList<Product> inventory = new ArrayList<>();
    
    public void addProduct(Product product) {
        System.out.println("Product added: " + product.getProductName() + " with quantity: " + product.getQuantity());
        inventory.add(product); 
    }
    
    public void removeProduct(String productId) {
        for (int i = 0; i < inventory.size(); i++) {
            if (inventory.get(i).getProductId().equals(productId)) {
                System.out.println("Successfully removed " + inventory.get(i).getProductId());
                inventory.remove(i);
                return;  
            }
        }
        System.out.println("Product not found: " + productId);
    }
    
    public void displayInventory() {
        if (inventory.isEmpty()) {
            System.out.println("Inventory is empty.");
        } else {
            for (Product p : inventory) {
                System.out.println("Product ID: " + p.getProductId() + ", Name: " + p.getProductName() +
                        ", Quantity: " + p.getQuantity() + ", Price: $" + p.getPrice());
            }
        }
    }
}

class InsufficientStockException extends RuntimeException {
    public InsufficientStockException(String msg) {
        super(msg);
    }
}

class InvalidQuantityException extends RuntimeException {
    public InvalidQuantityException(String msg) {
        super(msg);
    }
}
